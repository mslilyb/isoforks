#!/usr/bin/env python3

import argparse
import copy
import glob
import json
import os

# CLI

parser = argparse.ArgumentParser(description='isoformer & optiso runer')
parser.add_argument('genes', help='directory of genes (e.g apc)')
parser.add_argument('models', help='directory of models (e.g. models)')
parser.add_argument('build', help='build directory (e.g. build)')
parser.add_argument('--BLI', help='enable BLI comparison', action='store_true')
arg = parser.parse_args()

if not os.path.exists(arg.build): os.makedirs(arg.build)
for sub in ('json', 'optiso', 'isoformer'):
	if not os.path.exists(f'{arg.build}/{sub}'):
		os.makedirs(f'{arg.build}/{sub}')

params = {
	'--min_exon': 25,
	'--min_intron': 35,
	'--flank': 99,
	'--limit': 100,
       	'--apwm': f'{os.path.abspath(arg.models)}/acc.pwm',
	'--dpwm': f'{os.path.abspath(arg.models)}/don.pwm',
	'--emm': f'{os.path.abspath(arg.models)}/exon.mm',
	'--imm': f'{os.path.abspath(arg.models)}/intron.mm',
	'--elen': f'{os.path.abspath(arg.models)}/exon.len',
	'--ilen': f'{os.path.abspath(arg.models)}/intron.len',
}

opts = []
for k, v in params.items():
	opts.append(k)
	opts.append(str(v))
opts = ' '.join(opts)

template = {
	'gff_introns': True,
	'cli': params,
	'data': []
}

## full set json in case we want to find globally optimal params
## really needs the multi-processor version if we do

full = copy.deepcopy(template)
for ff in glob.glob(f'{arg.genes}/*.fa'):
	ff = os.path.abspath(ff)
	name = os.path.basename(ff[:-3])
	gff = ff[:-2] + 'gff3'
	full['data'].append({
		'name': name,
		'fasta': ff,
		'gff': gff,
	})

with open(f'{arg.build}/json/all.json', 'w') as fp:
	fp.write(json.dumps(full, indent=4))

## gene-specific jsons for optiso

for d in full['data']:
	single = copy.deepcopy(template)
	single['data'].append(d)
	with open(f'{arg.build}/json/{d["name"]}.json', 'w') as fp:
		fp.write(json.dumps(single, indent=4))

## makefile

with open(f'{arg.build}/Makefile', 'w') as fp:
	fp.write('all:\n\t$(MAKE) isoformer\n\t$(MAKE) optiso\n\n')

	targets = []
	ffs = []
	gffs = []
	gens = []
	isos = []
	jsons = []
	names = []
	for d in full['data']:
		name = d['name']
		names.append(name)
		ffs.append(os.path.abspath(d['fasta']))
		gffs.append(os.path.abspath(d['gff']))
		targets.append(os.path.abspath(f'{arg.build}/optiso/{name}.txt'))
		jsons.append(os.path.abspath(f'{arg.build}/json/{name}.json'))
		gens.append(os.path.abspath(f'{arg.build}/geniso/{name}.txt'))
		isos.append(os.path.abspath(f'{arg.build}/isoformer/{name}.txt'))

	# optiso
	fp.write(f'optiso:\\\n')
	for target in targets: fp.write(f'\t{target}\\\n')
	fp.write('\n\n')
	for target, json, name in zip(targets, jsons, names):
		fp.write(f'{target}:\n\t optiso {json} --name {name} > {target}\n')

	# isoformer
	fp.write(f'\nisoformer:\\\n')
	for iso in isos: fp.write(f'\t{iso}\\\n')
	fp.write('\n\n')
	for iso, ff, gff, name in zip(isos, ffs, gffs, names):
		fp.write(f'{iso}:\n')
		if arg.BLI:
			fp.write(f'\t isoformer {ff} {opts} --introns {gff} > isoformer/{name}.gff\n')
		else:
			fp.write(f'\t isoformer {ff} {opts} > isoformer/{name}.gff\n')

		fp.write(f'\t newcmp {gff} isoformer/{name}.gff > {iso}\n')
